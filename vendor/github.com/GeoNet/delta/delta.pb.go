// Code generated by protoc-gen-go.
// source: delta.proto
// DO NOT EDIT!

/*
Package delta is a generated protocol buffer package.

It is generated from these files:
	delta.proto

It has these top-level messages:
	Point
	Span
	Network
	Mark
	Marks
	Monument
	Offset
	Equipment
	InstalledAntenna
	InstalledRadome
	Firmware
	Receiver
	DeployedReceiver
	Session
	InstalledMetSensor
	Station
	Stations
	Site
	Orientation
	Scale
	InstalledSensor
	ShakeNZStream
	ShakeNZStreams
*/
package delta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	// Latitude - Geographical latitude of the point for the given datum.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude - Geographical longitude of the point for the given datum.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Elevation - Height in meters of the point for the given datum.
	Elevation float64 `protobuf:"fixed64,3,opt,name=elevation" json:"elevation,omitempty"`
	// Datum - Geographical reference system used for the latitude, longitude & elevation.
	Datum string `protobuf:"bytes,4,opt,name=datum" json:"datum,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Point) GetElevation() float64 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

func (m *Point) GetDatum() string {
	if m != nil {
		return m.Datum
	}
	return ""
}

type Span struct {
	// Start - time in Unix seconds.
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// End - time in Unix seconds.  A future date of 9999-01-01T00:00:00Z is used to indicate still open.
	End int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Span) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Span) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type Network struct {
	Code        string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	External    string `protobuf:"bytes,2,opt,name=external" json:"external,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Restricted  bool   `protobuf:"varint,4,opt,name=restricted" json:"restricted,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Network) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Network) GetExternal() string {
	if m != nil {
		return m.External
	}
	return ""
}

func (m *Network) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Network) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

type Mark struct {
	// Code used to uniquely identify GNSS Mark.
	Code               string                `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Name               string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Network            *Network              `protobuf:"bytes,3,opt,name=network" json:"network,omitempty"`
	Point              *Point                `protobuf:"bytes,4,opt,name=point" json:"point,omitempty"`
	Span               *Span                 `protobuf:"bytes,5,opt,name=span" json:"span,omitempty"`
	Monument           *Monument             `protobuf:"bytes,6,opt,name=monument" json:"monument,omitempty"`
	InstalledAntenna   []*InstalledAntenna   `protobuf:"bytes,7,rep,name=installed_antenna,json=installedAntenna" json:"installed_antenna,omitempty"`
	InstalledRadome    []*InstalledRadome    `protobuf:"bytes,8,rep,name=installed_radome,json=installedRadome" json:"installed_radome,omitempty"`
	DeployedReceiver   []*DeployedReceiver   `protobuf:"bytes,9,rep,name=deployed_receiver,json=deployedReceiver" json:"deployed_receiver,omitempty"`
	Session            []*Session            `protobuf:"bytes,10,rep,name=session" json:"session,omitempty"`
	InstalledMetSensor []*InstalledMetSensor `protobuf:"bytes,11,rep,name=installed_met_sensor,json=installedMetSensor" json:"installed_met_sensor,omitempty"`
}

func (m *Mark) Reset()                    { *m = Mark{} }
func (m *Mark) String() string            { return proto.CompactTextString(m) }
func (*Mark) ProtoMessage()               {}
func (*Mark) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Mark) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Mark) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mark) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Mark) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Mark) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *Mark) GetMonument() *Monument {
	if m != nil {
		return m.Monument
	}
	return nil
}

func (m *Mark) GetInstalledAntenna() []*InstalledAntenna {
	if m != nil {
		return m.InstalledAntenna
	}
	return nil
}

func (m *Mark) GetInstalledRadome() []*InstalledRadome {
	if m != nil {
		return m.InstalledRadome
	}
	return nil
}

func (m *Mark) GetDeployedReceiver() []*DeployedReceiver {
	if m != nil {
		return m.DeployedReceiver
	}
	return nil
}

func (m *Mark) GetSession() []*Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *Mark) GetInstalledMetSensor() []*InstalledMetSensor {
	if m != nil {
		return m.InstalledMetSensor
	}
	return nil
}

type Marks struct {
	Marks map[string]*Mark `protobuf:"bytes,1,rep,name=marks" json:"marks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Marks) Reset()                    { *m = Marks{} }
func (m *Marks) String() string            { return proto.CompactTextString(m) }
func (*Marks) ProtoMessage()               {}
func (*Marks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Marks) GetMarks() map[string]*Mark {
	if m != nil {
		return m.Marks
	}
	return nil
}

type Monument struct {
	DomesNumber        string  `protobuf:"bytes,1,opt,name=domes_number,json=domesNumber" json:"domes_number,omitempty"`
	MarkType           string  `protobuf:"bytes,2,opt,name=mark_type,json=markType" json:"mark_type,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	GroundRelationship float64 `protobuf:"fixed64,4,opt,name=ground_relationship,json=groundRelationship" json:"ground_relationship,omitempty"`
	FoundationType     string  `protobuf:"bytes,5,opt,name=foundation_type,json=foundationType" json:"foundation_type,omitempty"`
	FoundationDepth    float64 `protobuf:"fixed64,6,opt,name=foundation_depth,json=foundationDepth" json:"foundation_depth,omitempty"`
	Bedrock            string  `protobuf:"bytes,7,opt,name=bedrock" json:"bedrock,omitempty"`
	Geology            string  `protobuf:"bytes,8,opt,name=geology" json:"geology,omitempty"`
	Span               *Span   `protobuf:"bytes,9,opt,name=span" json:"span,omitempty"`
}

func (m *Monument) Reset()                    { *m = Monument{} }
func (m *Monument) String() string            { return proto.CompactTextString(m) }
func (*Monument) ProtoMessage()               {}
func (*Monument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Monument) GetDomesNumber() string {
	if m != nil {
		return m.DomesNumber
	}
	return ""
}

func (m *Monument) GetMarkType() string {
	if m != nil {
		return m.MarkType
	}
	return ""
}

func (m *Monument) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Monument) GetGroundRelationship() float64 {
	if m != nil {
		return m.GroundRelationship
	}
	return 0
}

func (m *Monument) GetFoundationType() string {
	if m != nil {
		return m.FoundationType
	}
	return ""
}

func (m *Monument) GetFoundationDepth() float64 {
	if m != nil {
		return m.FoundationDepth
	}
	return 0
}

func (m *Monument) GetBedrock() string {
	if m != nil {
		return m.Bedrock
	}
	return ""
}

func (m *Monument) GetGeology() string {
	if m != nil {
		return m.Geology
	}
	return ""
}

func (m *Monument) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type Offset struct {
	Vertical float64 `protobuf:"fixed64,1,opt,name=vertical" json:"vertical,omitempty"`
	North    float64 `protobuf:"fixed64,2,opt,name=north" json:"north,omitempty"`
	East     float64 `protobuf:"fixed64,3,opt,name=east" json:"east,omitempty"`
}

func (m *Offset) Reset()                    { *m = Offset{} }
func (m *Offset) String() string            { return proto.CompactTextString(m) }
func (*Offset) ProtoMessage()               {}
func (*Offset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Offset) GetVertical() float64 {
	if m != nil {
		return m.Vertical
	}
	return 0
}

func (m *Offset) GetNorth() float64 {
	if m != nil {
		return m.North
	}
	return 0
}

func (m *Offset) GetEast() float64 {
	if m != nil {
		return m.East
	}
	return 0
}

type Equipment struct {
	Make   string `protobuf:"bytes,1,opt,name=make" json:"make,omitempty"`
	Model  string `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Serial string `protobuf:"bytes,3,opt,name=serial" json:"serial,omitempty"`
	// Type e.g., Strong Motion Sensor
	Type string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Equipment) GetMake() string {
	if m != nil {
		return m.Make
	}
	return ""
}

func (m *Equipment) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Equipment) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Equipment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type InstalledAntenna struct {
	Equipment *Equipment `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Offset    *Offset    `protobuf:"bytes,2,opt,name=offset" json:"offset,omitempty"`
	Span      *Span      `protobuf:"bytes,3,opt,name=span" json:"span,omitempty"`
	Azimuth   float64    `protobuf:"fixed64,4,opt,name=azimuth" json:"azimuth,omitempty"`
}

func (m *InstalledAntenna) Reset()                    { *m = InstalledAntenna{} }
func (m *InstalledAntenna) String() string            { return proto.CompactTextString(m) }
func (*InstalledAntenna) ProtoMessage()               {}
func (*InstalledAntenna) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InstalledAntenna) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *InstalledAntenna) GetOffset() *Offset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *InstalledAntenna) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *InstalledAntenna) GetAzimuth() float64 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

type InstalledRadome struct {
	Equipment *Equipment `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Span      *Span      `protobuf:"bytes,2,opt,name=span" json:"span,omitempty"`
}

func (m *InstalledRadome) Reset()                    { *m = InstalledRadome{} }
func (m *InstalledRadome) String() string            { return proto.CompactTextString(m) }
func (*InstalledRadome) ProtoMessage()               {}
func (*InstalledRadome) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InstalledRadome) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *InstalledRadome) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type Firmware struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Notes   string `protobuf:"bytes,2,opt,name=notes" json:"notes,omitempty"`
	Span    *Span  `protobuf:"bytes,3,opt,name=span" json:"span,omitempty"`
}

func (m *Firmware) Reset()                    { *m = Firmware{} }
func (m *Firmware) String() string            { return proto.CompactTextString(m) }
func (*Firmware) ProtoMessage()               {}
func (*Firmware) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Firmware) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Firmware) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Firmware) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type Receiver struct {
	Equipment *Equipment  `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Firmware  []*Firmware `protobuf:"bytes,2,rep,name=firmware" json:"firmware,omitempty"`
}

func (m *Receiver) Reset()                    { *m = Receiver{} }
func (m *Receiver) String() string            { return proto.CompactTextString(m) }
func (*Receiver) ProtoMessage()               {}
func (*Receiver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Receiver) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *Receiver) GetFirmware() []*Firmware {
	if m != nil {
		return m.Firmware
	}
	return nil
}

type DeployedReceiver struct {
	Receiver *Receiver `protobuf:"bytes,1,opt,name=receiver" json:"receiver,omitempty"`
	Span     *Span     `protobuf:"bytes,2,opt,name=span" json:"span,omitempty"`
}

func (m *DeployedReceiver) Reset()                    { *m = DeployedReceiver{} }
func (m *DeployedReceiver) String() string            { return proto.CompactTextString(m) }
func (*DeployedReceiver) ProtoMessage()               {}
func (*DeployedReceiver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeployedReceiver) GetReceiver() *Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *DeployedReceiver) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type Session struct {
	Operator        string `protobuf:"bytes,1,opt,name=operator" json:"operator,omitempty"`
	Agency          string `protobuf:"bytes,2,opt,name=agency" json:"agency,omitempty"`
	Model           string `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	SatelliteSystem string `protobuf:"bytes,4,opt,name=satellite_system,json=satelliteSystem" json:"satellite_system,omitempty"`
	// Interval - sample interval in nanoseconds
	Interval      int64   `protobuf:"varint,5,opt,name=interval" json:"interval,omitempty"`
	ElevationMask float64 `protobuf:"fixed64,6,opt,name=elevation_mask,json=elevationMask" json:"elevation_mask,omitempty"`
	HeaderComment string  `protobuf:"bytes,7,opt,name=header_comment,json=headerComment" json:"header_comment,omitempty"`
	Span          *Span   `protobuf:"bytes,8,opt,name=span" json:"span,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Session) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Session) GetAgency() string {
	if m != nil {
		return m.Agency
	}
	return ""
}

func (m *Session) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Session) GetSatelliteSystem() string {
	if m != nil {
		return m.SatelliteSystem
	}
	return ""
}

func (m *Session) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Session) GetElevationMask() float64 {
	if m != nil {
		return m.ElevationMask
	}
	return 0
}

func (m *Session) GetHeaderComment() string {
	if m != nil {
		return m.HeaderComment
	}
	return ""
}

func (m *Session) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type InstalledMetSensor struct {
	Equipment  *Equipment `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Span       *Span      `protobuf:"bytes,2,opt,name=span" json:"span,omitempty"`
	Point      *Point     `protobuf:"bytes,3,opt,name=point" json:"point,omitempty"`
	IMSComment string     `protobuf:"bytes,4,opt,name=iMS_comment,json=iMSComment" json:"iMS_comment,omitempty"`
}

func (m *InstalledMetSensor) Reset()                    { *m = InstalledMetSensor{} }
func (m *InstalledMetSensor) String() string            { return proto.CompactTextString(m) }
func (*InstalledMetSensor) ProtoMessage()               {}
func (*InstalledMetSensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InstalledMetSensor) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *InstalledMetSensor) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *InstalledMetSensor) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *InstalledMetSensor) GetIMSComment() string {
	if m != nil {
		return m.IMSComment
	}
	return ""
}

// Station is a seismic or guage station.  It is the general location
// location of recording equipment.
type Station struct {
	// Code used to uniquely identify the Station.
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	// Name used to describe the general geographical location of the Station.
	Name    string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Network *Network         `protobuf:"bytes,3,opt,name=network" json:"network,omitempty"`
	Point   *Point           `protobuf:"bytes,4,opt,name=point" json:"point,omitempty"`
	Span    *Span            `protobuf:"bytes,5,opt,name=span" json:"span,omitempty"`
	Sites   map[string]*Site `protobuf:"bytes,6,rep,name=sites" json:"sites,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Station) Reset()                    { *m = Station{} }
func (m *Station) String() string            { return proto.CompactTextString(m) }
func (*Station) ProtoMessage()               {}
func (*Station) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Station) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Station) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Station) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Station) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Station) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *Station) GetSites() map[string]*Site {
	if m != nil {
		return m.Sites
	}
	return nil
}

type Stations struct {
	Stations map[string]*Station `protobuf:"bytes,1,rep,name=stations" json:"stations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Stations) Reset()                    { *m = Stations{} }
func (m *Stations) String() string            { return proto.CompactTextString(m) }
func (*Stations) ProtoMessage()               {}
func (*Stations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Stations) GetStations() map[string]*Station {
	if m != nil {
		return m.Stations
	}
	return nil
}

// a seismic sensor or gauge is located at a site.
type Site struct {
	Location        string             `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Survey          string             `protobuf:"bytes,2,opt,name=survey" json:"survey,omitempty"`
	Point           *Point             `protobuf:"bytes,3,opt,name=point" json:"point,omitempty"`
	Span            *Span              `protobuf:"bytes,4,opt,name=span" json:"span,omitempty"`
	InstalledSensor []*InstalledSensor `protobuf:"bytes,5,rep,name=installed_sensor,json=installedSensor" json:"installed_sensor,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Site) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Site) GetSurvey() string {
	if m != nil {
		return m.Survey
	}
	return ""
}

func (m *Site) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Site) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *Site) GetInstalledSensor() []*InstalledSensor {
	if m != nil {
		return m.InstalledSensor
	}
	return nil
}

type Orientation struct {
	Dip     float64 `protobuf:"fixed64,1,opt,name=dip" json:"dip,omitempty"`
	Azimuth float64 `protobuf:"fixed64,2,opt,name=azimuth" json:"azimuth,omitempty"`
}

func (m *Orientation) Reset()                    { *m = Orientation{} }
func (m *Orientation) String() string            { return proto.CompactTextString(m) }
func (*Orientation) ProtoMessage()               {}
func (*Orientation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Orientation) GetDip() float64 {
	if m != nil {
		return m.Dip
	}
	return 0
}

func (m *Orientation) GetAzimuth() float64 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

type Scale struct {
	Factor float64 `protobuf:"fixed64,1,opt,name=factor" json:"factor,omitempty"`
	Bias   float64 `protobuf:"fixed64,2,opt,name=bias" json:"bias,omitempty"`
}

func (m *Scale) Reset()                    { *m = Scale{} }
func (m *Scale) String() string            { return proto.CompactTextString(m) }
func (*Scale) ProtoMessage()               {}
func (*Scale) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Scale) GetFactor() float64 {
	if m != nil {
		return m.Factor
	}
	return 0
}

func (m *Scale) GetBias() float64 {
	if m != nil {
		return m.Bias
	}
	return 0
}

type InstalledSensor struct {
	Equipment   *Equipment   `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Span        *Span        `protobuf:"bytes,2,opt,name=span" json:"span,omitempty"`
	Orientation *Orientation `protobuf:"bytes,3,opt,name=orientation" json:"orientation,omitempty"`
	Offset      *Offset      `protobuf:"bytes,4,opt,name=offset" json:"offset,omitempty"`
	Scale       *Scale       `protobuf:"bytes,5,opt,name=scale" json:"scale,omitempty"`
}

func (m *InstalledSensor) Reset()                    { *m = InstalledSensor{} }
func (m *InstalledSensor) String() string            { return proto.CompactTextString(m) }
func (*InstalledSensor) ProtoMessage()               {}
func (*InstalledSensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *InstalledSensor) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *InstalledSensor) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *InstalledSensor) GetOrientation() *Orientation {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *InstalledSensor) GetOffset() *Offset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *InstalledSensor) GetScale() *Scale {
	if m != nil {
		return m.Scale
	}
	return nil
}

// for configuring shakenz-slink only.
type ShakeNZStream struct {
	// the stream id in the form received from SEEDLink e.g., NN_SSSSS_LL_CCC
	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// source for identity at the site level e.g., NN.SSSSS.LL
	Source     string  `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Datalogger string  `protobuf:"bytes,3,opt,name=datalogger" json:"datalogger,omitempty"`
	Sensor     string  `protobuf:"bytes,4,opt,name=sensor" json:"sensor,omitempty"`
	Network    string  `protobuf:"bytes,5,opt,name=network" json:"network,omitempty"`
	Station    string  `protobuf:"bytes,6,opt,name=station" json:"station,omitempty"`
	Location   string  `protobuf:"bytes,7,opt,name=location" json:"location,omitempty"`
	Latitude   float64 `protobuf:"fixed64,8,opt,name=latitude" json:"latitude,omitempty"`
	Longitude  float64 `protobuf:"fixed64,9,opt,name=longitude" json:"longitude,omitempty"`
	Channel    string  `protobuf:"bytes,10,opt,name=channel" json:"channel,omitempty"`
	SampleRate float64 `protobuf:"fixed64,11,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	Gain       float64 `protobuf:"fixed64,12,opt,name=gain" json:"gain,omitempty"`
	Q          float64 `protobuf:"fixed64,13,opt,name=q" json:"q,omitempty"`
	Horizontal bool    `protobuf:"varint,14,opt,name=horizontal" json:"horizontal,omitempty"`
	Vertical   bool    `protobuf:"varint,15,opt,name=vertical" json:"vertical,omitempty"`
}

func (m *ShakeNZStream) Reset()                    { *m = ShakeNZStream{} }
func (m *ShakeNZStream) String() string            { return proto.CompactTextString(m) }
func (*ShakeNZStream) ProtoMessage()               {}
func (*ShakeNZStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ShakeNZStream) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *ShakeNZStream) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ShakeNZStream) GetDatalogger() string {
	if m != nil {
		return m.Datalogger
	}
	return ""
}

func (m *ShakeNZStream) GetSensor() string {
	if m != nil {
		return m.Sensor
	}
	return ""
}

func (m *ShakeNZStream) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ShakeNZStream) GetStation() string {
	if m != nil {
		return m.Station
	}
	return ""
}

func (m *ShakeNZStream) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ShakeNZStream) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ShakeNZStream) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ShakeNZStream) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ShakeNZStream) GetSampleRate() float64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *ShakeNZStream) GetGain() float64 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *ShakeNZStream) GetQ() float64 {
	if m != nil {
		return m.Q
	}
	return 0
}

func (m *ShakeNZStream) GetHorizontal() bool {
	if m != nil {
		return m.Horizontal
	}
	return false
}

func (m *ShakeNZStream) GetVertical() bool {
	if m != nil {
		return m.Vertical
	}
	return false
}

// for configuring shakenz-slink only.
type ShakeNZStreams struct {
	Streams map[string]*ShakeNZStream `protobuf:"bytes,1,rep,name=streams" json:"streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ShakeNZStreams) Reset()                    { *m = ShakeNZStreams{} }
func (m *ShakeNZStreams) String() string            { return proto.CompactTextString(m) }
func (*ShakeNZStreams) ProtoMessage()               {}
func (*ShakeNZStreams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ShakeNZStreams) GetStreams() map[string]*ShakeNZStream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "delta.Point")
	proto.RegisterType((*Span)(nil), "delta.Span")
	proto.RegisterType((*Network)(nil), "delta.Network")
	proto.RegisterType((*Mark)(nil), "delta.Mark")
	proto.RegisterType((*Marks)(nil), "delta.Marks")
	proto.RegisterType((*Monument)(nil), "delta.Monument")
	proto.RegisterType((*Offset)(nil), "delta.Offset")
	proto.RegisterType((*Equipment)(nil), "delta.Equipment")
	proto.RegisterType((*InstalledAntenna)(nil), "delta.InstalledAntenna")
	proto.RegisterType((*InstalledRadome)(nil), "delta.InstalledRadome")
	proto.RegisterType((*Firmware)(nil), "delta.Firmware")
	proto.RegisterType((*Receiver)(nil), "delta.Receiver")
	proto.RegisterType((*DeployedReceiver)(nil), "delta.DeployedReceiver")
	proto.RegisterType((*Session)(nil), "delta.Session")
	proto.RegisterType((*InstalledMetSensor)(nil), "delta.InstalledMetSensor")
	proto.RegisterType((*Station)(nil), "delta.Station")
	proto.RegisterType((*Stations)(nil), "delta.Stations")
	proto.RegisterType((*Site)(nil), "delta.Site")
	proto.RegisterType((*Orientation)(nil), "delta.Orientation")
	proto.RegisterType((*Scale)(nil), "delta.Scale")
	proto.RegisterType((*InstalledSensor)(nil), "delta.InstalledSensor")
	proto.RegisterType((*ShakeNZStream)(nil), "delta.ShakeNZStream")
	proto.RegisterType((*ShakeNZStreams)(nil), "delta.ShakeNZStreams")
}

func init() { proto.RegisterFile("delta.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x8f, 0x1b, 0xc5,
	0x12, 0xd7, 0xac, 0xed, 0xf5, 0xb8, 0xbc, 0x7f, 0xfc, 0xfa, 0x45, 0x79, 0xf3, 0xf6, 0x3d, 0x60,
	0x33, 0x22, 0x62, 0x43, 0xc4, 0x46, 0xda, 0x70, 0x20, 0x88, 0x4b, 0x20, 0x41, 0x8a, 0xa2, 0xdd,
	0x44, 0x6d, 0x4e, 0xe1, 0x60, 0x7a, 0x3d, 0xbd, 0xf6, 0x68, 0xe7, 0x5f, 0xba, 0xdb, 0x0e, 0x0e,
	0xe2, 0x03, 0x70, 0x43, 0x9c, 0xb8, 0xc1, 0x81, 0x13, 0x9f, 0x80, 0x33, 0x5f, 0x85, 0x2f, 0x82,
	0xba, 0xfa, 0xcf, 0xcc, 0x38, 0xbb, 0xf9, 0x23, 0x81, 0xc4, 0xc5, 0xee, 0xfa, 0x55, 0x75, 0x77,
	0x75, 0x55, 0xf5, 0xaf, 0x6b, 0x60, 0x98, 0xf0, 0x4c, 0xb1, 0xc3, 0x4a, 0x94, 0xaa, 0x24, 0x3d,
	0x14, 0xe2, 0x05, 0xf4, 0x1e, 0x97, 0x69, 0xa1, 0xc8, 0x1e, 0x84, 0x19, 0x53, 0xa9, 0x5a, 0x24,
	0x3c, 0x0a, 0xf6, 0x83, 0x83, 0x80, 0x7a, 0x99, 0xfc, 0x1f, 0x06, 0x59, 0x59, 0xcc, 0x8c, 0x72,
	0x03, 0x95, 0x35, 0xa0, 0xb5, 0x3c, 0xe3, 0x4b, 0xa6, 0xd2, 0xb2, 0x88, 0x3a, 0x46, 0xeb, 0x01,
	0x72, 0x05, 0x7a, 0x09, 0x53, 0x8b, 0x3c, 0xea, 0xee, 0x07, 0x07, 0x03, 0x6a, 0x84, 0xf8, 0x10,
	0xba, 0xe3, 0x8a, 0xa1, 0x56, 0x2a, 0x26, 0x14, 0x6e, 0xd9, 0xa1, 0x46, 0x20, 0x23, 0xe8, 0xf0,
	0x22, 0xc1, 0x9d, 0x3a, 0x54, 0x0f, 0xe3, 0x6f, 0xa0, 0x7f, 0xc2, 0xd5, 0xb3, 0x52, 0x9c, 0x13,
	0x02, 0xdd, 0x69, 0x69, 0x9d, 0x1c, 0x50, 0x1c, 0x6b, 0xe7, 0xf9, 0xd7, 0x8a, 0x8b, 0x82, 0x65,
	0x38, 0x6b, 0x40, 0xbd, 0x4c, 0xf6, 0xf5, 0xb9, 0xe5, 0x54, 0xa4, 0x95, 0x77, 0x70, 0x40, 0x9b,
	0x10, 0x79, 0x1b, 0x40, 0x70, 0xa9, 0x44, 0x3a, 0x55, 0x3c, 0x41, 0x3f, 0x43, 0xda, 0x40, 0xe2,
	0xef, 0xbb, 0xd0, 0x3d, 0x66, 0x97, 0x6c, 0x4d, 0xa0, 0x5b, 0xb0, 0x9c, 0xdb, 0x6d, 0x71, 0x4c,
	0x0e, 0xa0, 0x5f, 0x18, 0x6f, 0x71, 0xbb, 0xe1, 0xd1, 0xce, 0xa1, 0x09, 0xbd, 0x3d, 0x03, 0x75,
	0x6a, 0x12, 0x43, 0xaf, 0xd2, 0xe1, 0xc7, 0x5d, 0x87, 0x47, 0x5b, 0xd6, 0x0e, 0x53, 0x42, 0x8d,
	0x8a, 0xbc, 0x03, 0x5d, 0x59, 0xb1, 0x22, 0xea, 0xa1, 0xc9, 0xd0, 0x9a, 0xe8, 0xf0, 0x51, 0x54,
	0x90, 0x9b, 0x10, 0xe6, 0x65, 0xb1, 0xc8, 0x79, 0xa1, 0xa2, 0x4d, 0x34, 0xda, 0xb5, 0x46, 0xc7,
	0x16, 0xa6, 0xde, 0x80, 0xdc, 0x83, 0x7f, 0xa5, 0x85, 0x54, 0x2c, 0xcb, 0x78, 0x32, 0x61, 0x85,
	0xe2, 0x45, 0xc1, 0xa2, 0xfe, 0x7e, 0xe7, 0x60, 0x78, 0xf4, 0x1f, 0x3b, 0xeb, 0x81, 0xd3, 0xdf,
	0x35, 0x6a, 0x3a, 0x4a, 0xd7, 0x10, 0x72, 0x17, 0x6a, 0x6c, 0x22, 0x58, 0x52, 0xe6, 0x3c, 0x0a,
	0x71, 0x91, 0xab, 0xeb, 0x8b, 0x50, 0xd4, 0xd2, 0xdd, 0xb4, 0x0d, 0x68, 0x47, 0x12, 0x5e, 0x65,
	0xe5, 0x4a, 0xaf, 0xc0, 0xa7, 0x3c, 0x5d, 0x72, 0x11, 0x0d, 0x5a, 0x8e, 0xdc, 0xb3, 0x7a, 0x6a,
	0xd5, 0x74, 0x94, 0xac, 0x21, 0x3a, 0xd4, 0x92, 0x4b, 0xa9, 0x33, 0x0b, 0x38, 0xd7, 0x85, 0x7a,
	0x6c, 0x50, 0xea, 0xd4, 0xe4, 0x21, 0x5c, 0xa9, 0x5d, 0xce, 0xb9, 0x9a, 0x48, 0x5e, 0xc8, 0x52,
	0x44, 0x43, 0x9c, 0xf6, 0xdf, 0x75, 0xb7, 0x8f, 0xb9, 0x1a, 0xa3, 0x01, 0x25, 0xe9, 0x0b, 0x58,
	0xfc, 0x2d, 0xf4, 0x74, 0x45, 0x48, 0xf2, 0x01, 0xf4, 0x72, 0x3d, 0x88, 0x82, 0x96, 0xe7, 0xa8,
	0x34, 0xbf, 0xf7, 0x0b, 0x25, 0x56, 0xd4, 0x58, 0xed, 0xdd, 0x07, 0xa8, 0x41, 0x5d, 0xe7, 0xe7,
	0x7c, 0x65, 0xcb, 0x49, 0x0f, 0xc9, 0x35, 0xe8, 0x2d, 0x59, 0xb6, 0x30, 0xe5, 0x54, 0x27, 0x5b,
	0xcf, 0xa1, 0x46, 0xf3, 0xf1, 0xc6, 0x47, 0x41, 0xfc, 0xdb, 0x06, 0x84, 0x2e, 0xb7, 0xe4, 0x1a,
	0x6c, 0xe9, 0x80, 0xca, 0x49, 0xb1, 0xc8, 0x4f, 0xb9, 0xb0, 0xcb, 0x0d, 0x11, 0x3b, 0x41, 0x88,
	0xfc, 0x0f, 0x06, 0x7a, 0xff, 0x89, 0x5a, 0x55, 0xae, 0x52, 0x43, 0x0d, 0x7c, 0xb1, 0xaa, 0xb0,
	0x82, 0x11, 0x37, 0x37, 0x03, 0xc7, 0xe4, 0x16, 0xfc, 0x7b, 0x26, 0xca, 0x45, 0xa1, 0x53, 0x93,
	0xe1, 0x45, 0x96, 0xf3, 0xb4, 0xc2, 0x2a, 0x0d, 0x28, 0x31, 0x2a, 0xda, 0xd0, 0x90, 0xf7, 0x60,
	0xf7, 0x4c, 0x83, 0x88, 0x98, 0x7d, 0x7a, 0xb8, 0xde, 0x4e, 0x0d, 0xe3, 0x6e, 0x37, 0x60, 0xd4,
	0x30, 0x4c, 0x78, 0xa5, 0xe6, 0x58, 0xb4, 0x01, 0x6d, 0x2c, 0x70, 0x4f, 0xc3, 0x24, 0x82, 0xfe,
	0x29, 0x4f, 0x44, 0x39, 0x3d, 0x8f, 0xfa, 0xb8, 0x96, 0x13, 0xb5, 0x66, 0xc6, 0xcb, 0xac, 0x9c,
	0xad, 0xa2, 0xd0, 0x68, 0xac, 0xe8, 0x2f, 0xcb, 0xe0, 0x92, 0xcb, 0x12, 0x9f, 0xc0, 0xe6, 0xa3,
	0xb3, 0x33, 0xc9, 0x91, 0xf1, 0x96, 0x5c, 0xa8, 0x74, 0xca, 0x32, 0xc7, 0x78, 0x4e, 0xd6, 0xbc,
	0x54, 0x94, 0x42, 0xcd, 0x2d, 0xdb, 0x19, 0x41, 0x47, 0x8a, 0x33, 0xa9, 0x2c, 0xc9, 0xe1, 0x38,
	0x66, 0x30, 0xb8, 0xff, 0x74, 0x91, 0x56, 0x98, 0x0a, 0x02, 0xdd, 0x9c, 0x9d, 0x7b, 0x82, 0xd0,
	0x63, 0xbd, 0x54, 0x5e, 0x26, 0xdc, 0x11, 0x93, 0x11, 0xc8, 0x55, 0xd8, 0x94, 0x5c, 0xa4, 0x2c,
	0xb3, 0x61, 0xb7, 0x92, 0x4f, 0x46, 0xb7, 0x4e, 0x46, 0xfc, 0x4b, 0x00, 0xa3, 0xf5, 0x3b, 0x49,
	0x0e, 0x61, 0xc0, 0xdd, 0xbe, 0xb8, 0xdf, 0xf0, 0x68, 0x64, 0x4f, 0xeb, 0xfd, 0xa1, 0xb5, 0x09,
	0xb9, 0x0e, 0x9b, 0x25, 0x9e, 0xdb, 0x96, 0xd6, 0xb6, 0x35, 0x36, 0xc1, 0xa0, 0x56, 0xe9, 0xe3,
	0xd7, 0xb9, 0x8c, 0x6c, 0x22, 0xe8, 0xb3, 0xe7, 0x69, 0xbe, 0x50, 0x73, 0x5b, 0x0d, 0x4e, 0x8c,
	0x4f, 0x61, 0x77, 0xed, 0xd2, 0xbf, 0xb1, 0x93, 0x6e, 0xf7, 0x8d, 0xcb, 0xb2, 0xf7, 0x25, 0x84,
	0x9f, 0xa7, 0x22, 0x7f, 0xc6, 0x04, 0xd7, 0x9e, 0x2c, 0xb9, 0xc0, 0xab, 0x6f, 0xe2, 0xed, 0x44,
	0x93, 0x3d, 0xc5, 0xa5, 0x0b, 0x39, 0x0a, 0xaf, 0x3c, 0x5a, 0x3c, 0x83, 0xd0, 0xf3, 0xca, 0x9b,
	0x7a, 0x7e, 0x13, 0xc2, 0x33, 0xeb, 0x58, 0xb4, 0x81, 0x54, 0xe0, 0x38, 0xd8, 0xf9, 0x4b, 0xbd,
	0x41, 0xfc, 0x15, 0x8c, 0xd6, 0xa9, 0x4d, 0x2f, 0xe0, 0x59, 0x30, 0x68, 0x91, 0xb8, 0x67, 0x3f,
	0x6f, 0xf0, 0xea, 0x38, 0x7d, 0xb7, 0x01, 0x7d, 0xcb, 0x80, 0xba, 0xce, 0xcb, 0x8a, 0x0b, 0xa6,
	0x4a, 0xc7, 0x0d, 0x5e, 0xd6, 0x65, 0xc8, 0x66, 0xbc, 0x98, 0xae, 0x6c, 0xa8, 0xac, 0x54, 0x17,
	0x6d, 0xa7, 0x59, 0xb4, 0x37, 0x60, 0x24, 0x99, 0xe2, 0x59, 0x96, 0x2a, 0x3e, 0x91, 0x2b, 0xa9,
	0xb8, 0x7b, 0xd6, 0x77, 0x3d, 0x3e, 0x46, 0x58, 0x6f, 0x9a, 0x16, 0x8a, 0x8b, 0x25, 0xcb, 0x90,
	0x08, 0x3a, 0xd4, 0xcb, 0xe4, 0x3a, 0xec, 0xf8, 0xfe, 0x60, 0x92, 0x33, 0x79, 0x6e, 0x09, 0x60,
	0xdb, 0xa3, 0xc7, 0x4c, 0x9e, 0x6b, 0xb3, 0x39, 0x67, 0x09, 0x17, 0x93, 0x69, 0x99, 0x63, 0x1e,
	0x0c, 0x0b, 0x6c, 0x1b, 0xf4, 0x33, 0x03, 0xfa, 0x58, 0x84, 0x97, 0xc5, 0xe2, 0xd7, 0x00, 0xc8,
	0x8b, 0xb4, 0xfe, 0x97, 0xd7, 0x66, 0xfd, 0x96, 0x77, 0x5e, 0xf6, 0x96, 0x0f, 0xd3, 0xe3, 0xb1,
	0x3f, 0x90, 0x09, 0x1e, 0xa4, 0xc7, 0x63, 0x7b, 0x9a, 0xf8, 0x47, 0x9d, 0x38, 0x65, 0x5a, 0xa7,
	0x7f, 0x68, 0xbb, 0x71, 0x0b, 0x7a, 0x32, 0xd5, 0xb7, 0x6b, 0xb3, 0xf5, 0x72, 0x5a, 0xaf, 0x0f,
	0xc7, 0x5a, 0x67, 0x1f, 0x3d, 0xb4, 0xd3, 0x8f, 0x5e, 0x0d, 0xbe, 0xfe, 0xa3, 0xa7, 0xe7, 0x34,
	0x1f, 0xbd, 0x1f, 0x02, 0x08, 0xed, 0x26, 0x92, 0xdc, 0x81, 0x50, 0xda, 0xb1, 0x7d, 0x7a, 0xdf,
	0x6a, 0xfb, 0x21, 0xfd, 0xc0, 0xf8, 0xe2, 0xcd, 0xf7, 0x1e, 0xc2, 0x76, 0x4b, 0x75, 0x81, 0x47,
	0xef, 0xb6, 0x3d, 0xda, 0x69, 0x2f, 0xdd, 0x74, 0xea, 0xf7, 0x00, 0xba, 0xda, 0x51, 0xec, 0x9f,
	0xcb, 0xa9, 0x69, 0x82, 0xed, 0x2d, 0x73, 0x32, 0x92, 0xfd, 0x42, 0x2c, 0xb9, 0xbf, 0x65, 0x46,
	0x7a, 0xcd, 0x8a, 0x31, 0xe9, 0xe8, 0x5e, 0x96, 0x8e, 0x56, 0x2b, 0x66, 0x7b, 0x9a, 0xde, 0xc5,
	0xad, 0x98, 0x6d, 0x68, 0xea, 0x56, 0xcc, 0x76, 0x33, 0x77, 0x60, 0xf8, 0x48, 0xa4, 0xbc, 0xb0,
	0x75, 0x37, 0x82, 0x4e, 0x92, 0x56, 0xf6, 0x4d, 0xd4, 0xc3, 0x26, 0xe9, 0x6f, 0xb4, 0x49, 0xff,
	0x36, 0xf4, 0xc6, 0x53, 0x96, 0x71, 0x7d, 0xc6, 0x33, 0x36, 0x75, 0x1c, 0x13, 0x50, 0x2b, 0xe9,
	0x82, 0x3d, 0x4d, 0x99, 0xb4, 0xf3, 0x70, 0x1c, 0xff, 0x11, 0x34, 0x9e, 0x8a, 0xbf, 0xeb, 0x3a,
	0x7e, 0x08, 0xc3, 0xb2, 0x3e, 0x94, 0x0d, 0x31, 0x71, 0xaf, 0x5e, 0xad, 0xa1, 0x4d, 0xb3, 0xc6,
	0x33, 0xd9, 0x7d, 0xd9, 0x33, 0x19, 0x43, 0x4f, 0xea, 0x63, 0xdb, 0x5b, 0xe2, 0x32, 0x87, 0xa1,
	0xa0, 0x46, 0x15, 0xff, 0xd4, 0x81, 0xed, 0xf1, 0x9c, 0x9d, 0xf3, 0x93, 0x27, 0x63, 0x25, 0x38,
	0xcb, 0x75, 0x1b, 0x26, 0x71, 0x34, 0x49, 0x13, 0x57, 0x24, 0x06, 0x78, 0x90, 0x60, 0x91, 0x94,
	0x0b, 0x31, 0xe5, 0xbe, 0x48, 0x50, 0xd2, 0x5f, 0x27, 0x09, 0x53, 0x2c, 0x2b, 0x67, 0x33, 0x2e,
	0x2c, 0x1f, 0x37, 0x10, 0xd3, 0x49, 0x60, 0xd6, 0xbb, 0xae, 0x93, 0xc0, 0x80, 0x46, 0x35, 0x2b,
	0x98, 0x4e, 0xcc, 0xb3, 0x40, 0x04, 0x7d, 0x7b, 0x19, 0x90, 0x78, 0x07, 0xd4, 0x89, 0xad, 0x22,
	0xee, 0xaf, 0x15, 0x71, 0xf3, 0x03, 0x31, 0x7c, 0xd9, 0x07, 0xe2, 0x60, 0xfd, 0x03, 0x31, 0x82,
	0xfe, 0x74, 0xce, 0x8a, 0x82, 0x67, 0x11, 0x98, 0xfd, 0xac, 0xa8, 0xe9, 0x50, 0xb2, 0xbc, 0xca,
	0xf8, 0x44, 0x30, 0xc5, 0xa3, 0x21, 0xce, 0x04, 0x03, 0x51, 0xa6, 0x90, 0xee, 0x66, 0x2c, 0x2d,
	0xa2, 0x2d, 0x53, 0x3d, 0x7a, 0x4c, 0xb6, 0x20, 0x78, 0x1a, 0x6d, 0x23, 0x10, 0x3c, 0xd5, 0xe1,
	0x99, 0x97, 0x22, 0x7d, 0x5e, 0x16, 0x8a, 0x65, 0xd1, 0x8e, 0xf9, 0x78, 0xab, 0x91, 0x56, 0x97,
	0xb7, 0x8b, 0x5a, 0x2f, 0xc7, 0x3f, 0x07, 0xb0, 0xd3, 0xca, 0x90, 0x24, 0x9f, 0xe8, 0xd8, 0xe0,
	0xd0, 0xd2, 0x4a, 0xec, 0x52, 0xdb, 0xb2, 0x3b, 0xb4, 0xff, 0x86, 0x5b, 0xdc, 0x94, 0xbd, 0xc7,
	0xb0, 0xd5, 0x54, 0x5c, 0xc0, 0x2c, 0xef, 0xb7, 0x99, 0xe5, 0xca, 0x45, 0xab, 0x37, 0xf8, 0xe5,
	0xd3, 0xfe, 0x13, 0xf3, 0xa1, 0x7e, 0xba, 0x89, 0x9f, 0xed, 0xb7, 0xff, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0x26, 0x8e, 0xc5, 0x23, 0xc5, 0x0f, 0x00, 0x00,
}
